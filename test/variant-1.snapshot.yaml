---
# Source: mysql/templates/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: release-name-mysql
  namespace: lbs
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Tiller"
type: Opaque
data:
  
  mysql-root-password:  "dGVzdGluZw=="
  
  
  mysql-password:  "bm90dGhlcGFzc3dvcmQ="
  


---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-ssl-certs
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Tiller"
type: Opaque
data:
  ca.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  server-cert.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  server-key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQouLi4KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0=

---
# Source: mysql/templates/configurationFiles-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mysql-configuration
  namespace: lbs
data:
  mysql.cnf: |-
    [mysqld]
    skip-name-resolve
    ssl-ca=/ssl/ca.pem
    ssl-cert=/ssl/server-cert.pem
    ssl-key=/ssl/server-key.pem
---
# Source: mysql/templates/initializationFiles-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mysql-initialization
  namespace: lbs
data:
  first-db.sql: |-
    CREATE DATABASE IF NOT EXISTS first DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  second-db.sql: |-
    CREATE DATABASE IF NOT EXISTS second DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
---
# Source: mysql/templates/tests/test-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mysql-test
  namespace: lbs
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    heritage: "Tiller"
    release: "release-name"
data:
  run.sh: |-
    @test "Testing SSL MySQL Connection" {
      mysql --host=release-name-mysql --port=3306 --ssl-cert=/ssl/server-cert.pem --ssl-key=ssl/server-key.pem -u root -ptesting
    }

---
# Source: mysql/templates/pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-mysql
  namespace: lbs
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Tiller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
  storageClassName: "gp2"

---
# Source: mysql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mysql
  namespace: lbs
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Tiller"
  annotations:
    annotation1: value1
    
    prometheus.io/port: "9104"
    prometheus.io/scrape: "true"
    test1: test2
    
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  - name: metrics
    port: 9104
    targetPort: metrics
  selector:
    app: release-name-mysql

---
# Source: mysql/templates/tests/test.yaml

apiVersion: v1
kind: Pod
metadata:
  name: release-name-mysql-test
  namespace: lbs
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    heritage: "Tiller"
    release: "release-name"
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: test-framework
      image: "dduportal/bats:0.4.0"
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: release-name-test
      image: "mysql-something:someimagetag"
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
      - name: certificates
        mountPath: /ssl
  volumes:
  - name: tests
    configMap:
      name: release-name-mysql-test
  - name: tools
    emptyDir: {}
  - name: certificates
    secret:
      secretName: mysql-ssl-certs
  restartPolicy: Never

---
# Source: mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mysql
  namespace: lbs
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Tiller"
  annotations:
    deployannotation1: value1
    

spec:
  strategy:
    type: Recreate
    
  selector:
    matchLabels:
      app: release-name-mysql
      release: release-name
  template:
    metadata:
      labels:
        app: release-name-mysql
        release: release-name
        label1: hello
        label2: world
        
      annotations:
        annotation1: something
        annotation2: somethingelse
        
    spec:
      schedulerName: "stork"
      imagePullSecrets:
        - name: myRegistryKeySecretName
        
      priorityClassName: "somepriorityClass"
      securityContext:
        fsGroup: 999
        runAsUser: 999
      serviceAccountName: default
      initContainers:
      - name: "remove-lost-found"
        image: "busybox-something:busyboximagetag"
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 20m
            memory: 20Mi
          
        command:  ["rm", "-fr", "/var/lib/mysql/lost+found"]
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: /whatever
      - name: do-something
        image: busybox
        command: ['do', 'something']
      
      nodeSelector:
        disktype: ssd
        
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: another-node-label-key
                operator: In
                values:
                - another-node-label-value
            weight: 1
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/e2e-az-name
                operator: In
                values:
                - e2e-az1
                - e2e-az2
        
      tolerations:
        - effect: NoSchedule
          key: key
          operator: Equal
          value: value
        
      containers:
      - name: release-name-mysql
        image: "mysql-something:someimagetag"
        imagePullPolicy: "Always"
        args:
          - "--arg-1"
          - "--arg-2"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-password
        - name: MYSQL_USER
          value: "notroot"
        - name: MYSQL_DATABASE
          value: "someappdb"
        - name: TZ
          value: America/Denver
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: /whatever
        - name: configurations
          mountPath: /etc/mysql/conf.d/mysql.cnf
          subPath: mysql.cnf
        - name: migrations
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /ssl
        - name: extras
          mountPath: /usr/share/extras
          readOnly: true
        
      - name: metrics
        image: "prom/mysqld-exporter:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-root-password
        command:
        - 'sh'
        - '-c'
        - 'DATA_SOURCE_NAME="root:$MYSQL_ROOT_PASSWORD@(localhost:3306)/" /bin/mysqld_exporter'
        - "# test"
        ports:
        - name: metrics
          containerPort: 9104
        livenessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 40m
            memory: 40Mi
          requests:
            cpu: 20m
            memory: 20Mi
          
      volumes:
      - name: configurations
        configMap:
          name: release-name-mysql-configuration
      - name: migrations
        configMap:
          name: release-name-mysql-initialization
      - name: certificates
        secret:
          secretName: mysql-ssl-certs
      - name: data
        persistentVolumeClaim:
          claimName: release-name-mysql
      - name: extras
        emptyDir: {}
      

---
# Source: mysql/templates/servicemonitor.yaml

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: release-name-mysql
  namespace: lbs
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Tiller"
    label1: value1
    
spec:
  endpoints:
    - port: metrics
      interval: 30s
  namespaceSelector:
    matchNames:
      - lbs
  selector:
    matchLabels:
      app: release-name-mysql
      release: release-name

---
# Source: mysql/templates/serviceaccount.yaml


